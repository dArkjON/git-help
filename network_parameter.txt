
BTX
MAIN_PUBKEYHASH="0x03" #strNetworkID = "main";
	chainparams.cpp
	base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,3); => 0x03
MAIN_PRIVKEY="0x80"
	chainparams.cpp
	base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,128); => 0x80
MAIN_SCRIPTHASH="0x7d"
	chainparams.cpp
	base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,125); //s 34 letters => 0x7d
	base58Prefixes[SCRIPT_ADDRESS2] = std::vector<unsigned char>(1,125); //s 34 letters => 0x7d
MAIN_XPUBKEY="0x0488b21e"
	chainparams.cpp
	base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x88, 0xB2, 0x1E}; => 0x0488b21e
MAIN_XPRIVKEY="0x0488ade4"
	chainparams.cpp
	base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x88, 0xAD, 0xE4}; => 0x0488ade4
MAIN_ZADDR="no"
MAIN_ZKEY="no"
MAIN_NETMAGIC="0xf9beb4d9"
	src/chainparams.cpp
	pchMessageStart[0] = 0xf9;
        pchMessageStart[1] = 0xbe;
        pchMessageStart[2] = 0xb4;
        pchMessageStart[3] = 0xd9;
MAIN_DNSSEED="37.120.190.76, 37.120.186.85, 185.194.140.60, 188.71.223.206, 185.194.142.122"
	src/chainparams.cpp
	vSeeds.emplace_back("37.120.190.76", false);
	vSeeds.emplace_back("37.120.186.85", false);
	vSeeds.emplace_back("185.194.140.60", false);
	vSeeds.emplace_back("188.71.223.206", false);
	vSeeds.emplace_back("185.194.142.122", false);
TEST_PUBKEYHASH="0x1d25" #strNetworkID = "test";
    src/chainparams.cpp
	base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111); => 0x6f
TEST_PRIVKEY="0xef"
	src/chainparams.cpp
	base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239); => 0xef
TEST_SCRIPTHASH="0x1cba"
	src/chainparams.cpp
	base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196); => 0xc4
	base58Prefixes[SCRIPT_ADDRESS2] = std::vector<unsigned char>(1,58); => 0x3a
TEST_XPUBKEY="0x043587cf"
	src/chainparams.cpp
	base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF}; => 0x043587cf
TEST_XPRIVKEY="0x04358394"
	src/chainparams.cpp
	base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94}; => 0x04358394
TEST_ZADDR="no"
TEST_ZKEY="no"
TEST_NETMAGIC="0xfdd2c8f1"
	src/chainparams.cpp
	pchMessageStart[0] = 0xfd;
        pchMessageStart[1] = 0xd2;
        pchMessageStart[2] = 0xc8;
        pchMessageStart[3] = 0xf1;
DEFAULT_PORT="8555"
RPC_PORT="8556"
TOR_PORT="9051"


BTDX
MAIN_PUBKEYHASH="0x19" #strNetworkID = "main";
	src/chainparams.cpp
	base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1, 25);
MAIN_PRIVKEY="0x99"
	src/chainparams.cpp
	base58Prefixes[SECRET_KEY] = std::vector<unsigned char>(1, 153);
MAIN_SCRIPTHASH="0x05"
	src/chainparams.cpp
	base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1, 5);
MAIN_XPUBKEY="0x0488b21e"
	src/chainparams.cpp
	base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E).convert_to_container<std::vector<unsigned char> >();
MAIN_XPRIVKEY="0x0488ade4"
	src/chainparams.cpp
	base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4).convert_to_container<std::vector<unsigned char> >();
MAIN_ZADDR="no"
MAIN_ZKEY="no"
MAIN_NETMAGIC="0xf9beb4d9"
	contrib/linearize/linearize-data.py:            
	settings['netmagic'] = 'f9beb4d9'
MAIN_DNSSEED="188.68.52.172, 37.120.186.85, 37.120.190.76"
	src/chainparams.cpp
	vSeeds.push_back(CDNSSeedData("188.68.52.172", "188.68.52.172"));
    Seeds.push_back(CDNSSeedData("37.120.186.85", "37.120.186.85"));
    vSeeds.push_back(CDNSSeedData("37.120.190.76", "37.120.190.76"));
TEST_PUBKEYHASH="0x8b" #strNetworkID = "test";
	src/chainparams.cpp
	 base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1, 139); // Testnet bitcloud addresses start with 'x' or 'y'
TEST_PRIVKEY="0xef"
	src/chainparams.cpp
	base58Prefixes[SECRET_KEY] = std::vector<unsigned char>(1, 239);     // Testnet private keys start with '9' or 'c' (Bitcoin defaults)
TEST_SCRIPTHASH="0x13"
	src/chainparams.cpp
	base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1, 19);  // Testnet bitcloud script addresses start with '8' or '9'
TEST_XPUBKEY="0x3a8061a0"
	src/chainparams.cpp
	base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x3a)(0x80)(0x61)(0xa0).convert_to_container<std::vector<unsigned char> >();
TEST_XPRIVKEY="0x3a805837"
	src/chainparams.cpp
	base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x3a)(0x80)(0x58)(0x37).convert_to_container<std::vector<unsigned char> >();
TEST_ZADDR="no"
TEST_ZKEY="no"
DEFAULT_PORT="8329"
RPC_PORT="8330"
TOR_PORT="9050"

   
BSD
MAIN_PUBKEYHASH="0x66" # strNetworkID = "main";
	src/chainparams.cpp
	base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,102);
MAIN_PRIVKEY="0xcc"
	src/chainparams.cpp
	base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,204);
MAIN_SCRIPTHASH="0x05"
	src/chainparams.cpp
	base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);
MAIN_XPUBKEY="0x0488b21e"
	src/chainparams.cpp
	base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x88)(0xB2)(0x1E).convert_to_container<std::vector<unsigned char> >();
MAIN_XPRIVKEY="0x0488ade4"
	src/chainparams.cpp
	base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x88)(0xAD)(0xE4).convert_to_container<std::vector<unsigned char> >();
MAIN_ZADDR="no"
MAIN_ZKEY="no"
MAIN_NETMAGIC="0xf9beb4d9"
	contrib/linearize/linearize.py:         
	settings['netmagic'] = 'f9beb4d9'
	contrib/linearize/linearize-data.py:    
	settings['netmagic'] = 'f9beb4d9'
MAIN_DNSSEED="188.68.52.172, 37.120.186.85, 37.120.190.76, 213.136.80.93, 213.136.86.202, 213.136.86.205, 213.136.86.207"
	src/chainparams.cpp
    vSeeds.push_back(CDNSSeedData("188.68.52.172", "188.68.52.172"));
    vSeeds.push_back(CDNSSeedData("37.120.186.85", "37.120.186.85"));
    vSeeds.push_back(CDNSSeedData("37.120.190.76", "37.120.190.76"));
    vSeeds.push_back(CDNSSeedData("213.136.80.93", "213.136.80.93"));
    vSeeds.push_back(CDNSSeedData("213.136.86.202", "213.136.86.202"));
    vSeeds.push_back(CDNSSeedData("213.136.86.205", "213.136.86.205"));
    vSeeds.push_back(CDNSSeedData("213.136.86.207", "213.136.86.207"));
TEST_PUBKEYHASH="0x6f" #strNetworkID = "test";
	src/chainparams.cpp
	base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);
TEST_PRIVKEY="0xef"
	src/chainparams.cpp
	base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);
TEST_SCRIPTHASH="0xc4"
	src/chainparams.cpp
	base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);
TEST_XPUBKEY="0x043587cf"
	src/chainparams.cpp
	base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();
TEST_XPRIVKEY="0x04358394"
	src/chainparams.cpp
	base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();
TEST_ZADDR="no"
TEST_ZKEY="no"
DEFAULT_PORT="8886"
RPC_PORT="8800"
TOR_PORT="9051"

   
MEC
MAIN_PUBKEYHASH="0x32" #strNetworkID = "main";
	src/chainparams.cpp
	base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,50);
MAIN_PRIVKEY="0xb2"
	src/chainparams.cpp
	 base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,178);
MAIN_SCRIPTHASH="0x05"
	src/chainparams.cpp
	base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5); => 0x05
	base58Prefixes[SCRIPT_ADDRESS2] = std::vector<unsigned char>(1,50); => 0x32
MAIN_XPUBKEY="0x0488b21e"
	src/chainparams.cpp
	base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x88, 0xB2, 0x1E};
MAIN_XPRIVKEY="0x0488ade4"
	src/chainparams.cpp
	base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x88, 0xAD, 0xE4};
MAIN_ZADDR="no"
MAIN_ZKEY="no"
MAIN_NETMAGIC="0xf9beb4d9"
	contrib/linearize/linearize-data.py:            
	settings['netmagic'] = 'f9beb4d9'
MAIN_DNSSEED="37.120.190.76, 37.120.186.85, 185.194.140.60, 88.71.223.206, 185.194.142.122"
    vSeeds.emplace_back("37.120.190.76", false);
    vSeeds.emplace_back("37.120.186.85", false);
    vSeeds.emplace_back("185.194.140.60", false);
    vSeeds.emplace_back("188.71.223.206", false);
    vSeeds.emplace_back("185.194.142.122", false);
TEST_PUBKEYHASH="0x6f" #strNetworkID = "test";
	src/chainparams.cpp
	base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);
TEST_PRIVKEY="0xef"
	src/chainparams.cpp
	base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);
TEST_SCRIPTHASH="0xc4"
	src/chainparams.cpp
	base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196); => 0xc4
	base58Prefixes[SCRIPT_ADDRESS2] = std::vector<unsigned char>(1,58); => 0x3a
TEST_XPUBKEY="0x043587cf"
	src/chainparams.cpp
	base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};
TEST_XPRIVKEY="0x04358394"
	src/chainparams.cpp
	base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};
TEST_ZADDR="no"
TEST_ZKEY="no"
DEFAULT_PORT="8329"
RPC_PORT="8556"
TOR_PORT="9051"

