diff -r bitcore-lib-btx/lib/address.js bitcore-lib-btx-ready/lib/address.js
165,167c165,166
<   var prefix = buffer[0]*256 + buffer[1];
<   var pubkeyhashNetwork = Networks.get(prefix, 'pubkeyhash');
<   var scripthashNetwork = Networks.get(prefix, 'scripthash');
---
>   var pubkeyhashNetwork = Networks.get(buffer[0], 'pubkeyhash');
>   var scripthashNetwork = Networks.get(buffer[0], 'scripthash');
195,196c194,195
<   if (buffer.length !== 2 + 20) {
<     throw new TypeError('Address buffers must be exactly 22 bytes.');
---
>   if (buffer.length !== 1 + 20) {
>     throw new TypeError('Address buffers must be exactly 21 bytes.');
210c209
<   info.hashBuffer = buffer.slice(2);
---
>   info.hashBuffer = buffer.slice(1);
463,464c462
<   var version = new Buffer(2);
<   version.writeUInt16BE(this.network[this.type], 0);
---
>   var version = new Buffer([this.network[this.type]]);

########################################

diff -r bitcore-lib-btx/lib/block/blockheader.js bitcore-lib-btx-ready/lib/block/blockheader.js
30d29
<   this.reserved = info.reserved;
35d33
<   this.solution = info.solution;
74,76d71
<   var reserved = data.reserved;
<   var nonce = data.nonce;
<   var solution = data.solution;
83,91c78
<   if (_.isString(data.reserved)) {
<     reserved = BufferUtil.reverse(new Buffer(data.reserved, 'hex'));
<   }
<   if (_.isString(data.nonce)) {
<     nonce = BufferUtil.reverse(new Buffer(data.nonce, 'hex'));
<   }
<   if (_.isString(data.solution)) {
<     solution = new Buffer(data.solution, 'hex');
<   }
---
> 
97d83
<     reserved: reserved,
101,102c87
<     nonce: nonce,
<     solution: solution
---
>     nonce: data.nonce
158d142
<   info.reserved = br.read(32);
161,163c145
<   info.nonce = br.read(32);
<   var lenSolution = br.readVarintNum();
<   info.solution = br.read(lenSolution);
---
>   info.nonce = br.readUInt32LE();
185d166
<     reserved: BufferUtil.reverse(this.reserved).toString('hex'),
188,189c169
<     nonce: BufferUtil.reverse(this.nonce).toString('hex'),
<     solution: this.solution.toString('hex')
---
>     nonce: this.nonce
218d197
<   bw.write(this.reserved);
221,223c200
<   bw.write(this.nonce);
<   bw.writeVarintNum(this.solution.length);
<   bw.write(this.solution);
---
>   bw.writeUInt32LE(this.nonce);

#####################################

diff -r bitcore-lib-btx/lib/networks.js bitcore-lib-btx-ready/lib/networks.js
62,63d61
<  * @param {Number} data.zaddr - The BitCore payment address prefix
<  * @param {Number} data.zkey - The BitCore spending key prefix
80,82c78
<     xprivkey: data.xprivkey,
<     zaddr: data.zaddr,
<     zkey: data.zkey
---
>     xprivkey: data.xprivkey
136c132
<   pubkeyhash: 0x1cb8,
---
>   pubkeyhash: 0x03,
138c134
<   scripthash: 0x1cbd,
---
>   scripthash: 0x7d,
141,144c137,138
<   zaddr: 0x169a,
<   zkey: 0xab36,
<   networkMagic: 0x24e92764,
<   port: 16124,
---
>   networkMagic: 0xf9beb4d9,
>   port: 8556,
146c140
<     'bitcore.tech'
---
>     '37.120.190.76'
163,165c157
<   xprivkey: 0x04358394,
<   zaddr: 0x16b6,
<   zkey: 0xac08,
---
>   xprivkey: 0x04358394

#####################################

Only in bitcore-lib-btx/lib/transaction: jsdescription.js

#########################################

diff -r bitcore-lib-btx/lib/transaction/transaction.js bitcore-lib-btx-ready/lib/transaction/transaction.js
29,30d28
< var JSDescription = require('./jsdescription');
< 
43d40
<   this.joinSplits = [];
295,304d291
<   if (this.version >= 2) {
<     writer.writeVarintNum(this.joinSplits.length);
<     _.each(this.joinSplits, function(jsdesc) {
<       jsdesc.toBufferWriter(writer);
<     });
<     if (this.joinSplits.length > 0) {
<       writer.write(this.joinSplitPubKey);
<       writer.write(this.joinSplitSig);
<     }
<   }
315c302
<   var i, sizeTxIns, sizeTxOuts, sizeJSDescs;
---
>   var i, sizeTxIns, sizeTxOuts;
328,337d314
<   if (this.version >= 2) {
<     sizeJSDescs = reader.readVarintNum();
<     for (i = 0; i < sizeJSDescs; i++) {
<       this.joinSplits.push(JSDescription.fromBufferReader(reader));
<     }
<     if (sizeJSDescs > 0) {
<       this.joinSplitPubKey = reader.read(32);
<       this.joinSplitSig = reader.read(64);
<     }
<   }
357,367d333
<   if (this.version >= 2) {
<     var joinSplits = [];
<     this.joinSplits.forEach(function(joinSplit) {
<       joinSplits.push(joinSplit.toObject());
<     });
<     obj.joinSplits = joinSplits;
<     if (this.joinSplits.length > 0) {
<       obj.joinSplitPubKey = BufferUtil.reverse(this.joinSplitPubKey).toString('hex');
<       obj.joinSplitSig = this.joinSplitSig.toString('hex');
<     }
<   }
424,432d389
<   if (this.version >= 2) {
<     _.each(transaction.joinSplits, function(joinSplit) {
<       self.joinSplits.push(new JSDescription(joinSplit));
<     });
<     if (self.joinSplits.length > 0) {
<       self.joinSplitPubKey = BufferUtil.reverse(new Buffer(transaction.joinSplitPubKey, 'hex'));
<       self.joinSplitSig = new Buffer(transaction.joinSplitSig, 'hex');
<     }
<   }

##################################

diff -r bitcore-lib-btx/lib/uri.js bitcore-lib-btx-ready/lib/uri.js
113,114c113,114
<   if (info.protocol !== 'bitcore:') {
<     throw new TypeError('Invalid bitcore URI');
---
>   if (info.protocol !== 'btx:') {
>     throw new TypeError('Invalid btx URI');
138c138
<     throw new TypeError('Invalid bitcore address');
---
>     throw new TypeError('Invalid btx address');
208c208
<     protocol: 'bitcore:',
---
>     protocol: 'btx:',

##################

Only in bitcore-lib-btx/lib: zcash

###################

diff -r bitcore-lib-btx/package.json bitcore-lib-btx-ready/package.json
64c64
<       "email": "larry@mybitcore.org"
---
>       "email": "larry@myhush.org"
72c72
<     "bitcore",
---
>     "btx",

#################

diff -r bitcore-lib-btx/README.md bitcore-lib-btx-ready/README.md
1c1
< Bitcore Bitcore Library
---
> Bitcore btx Library
4c4
< A pure and powerful JavaScript BitCore library.
---
> A pure and powerful JavaScript btx library.
8c8
< BitCore is a powerful new peer-to-peer platform for the next generation of financial technology. The decentralized nature of the BitCore network allows for highly resilient BitCore infrastructure, and the developer community needs reliable, open-source tools to implement Bitcore apps and services.
---
> btx is a powerful new peer-to-peer platform for the next generation of financial technology. The decentralized nature of the btx network allows for highly resilient btx infrastructure, and the developer community needs reliable, open-source tools to implement btx apps and services.
